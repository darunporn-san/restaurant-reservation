"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.padToTwo = padToTwo;
exports.formatDateTimeZoneIntoIso = formatDateTimeZoneIntoIso;
exports.DropdownIndicator = exports.defaultDateFormat = exports.defaultTimeFormat = exports.defaultTimes = exports.placeholderDatetime = exports.EmptyClearIndicator = void 0;

var _react = _interopRequireDefault(require("react"));

var EmptyClearIndicator = null; // This date was chosen to clearly show date and time formats (day > 12)
// e.g. 18/02/1993 vs. 2/18/1993 and 1:00 PM vs 13:00

exports.EmptyClearIndicator = EmptyClearIndicator;
var placeholderDatetime = new Date(1993, 1, 18, 13);
exports.placeholderDatetime = placeholderDatetime;
var defaultTimes = ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30', '18:00'];
exports.defaultTimes = defaultTimes;
var defaultTimeFormat = 'h:mma';
exports.defaultTimeFormat = defaultTimeFormat;
var defaultDateFormat = 'YYYY/MM/DD';
exports.defaultDateFormat = defaultDateFormat;

function padToTwo(number) {
  return number <= 99 ? "0".concat(number).slice(-2) : "".concat(number);
}

var DropdownIndicator = function DropdownIndicator(props) {
  // Wanted to use React.Component<{}> but that was having issues
  // https://github.com/basarat/typescript-book/blob/master/docs/jsx/react.md#react-jsx-tip-accept-a-component-that-can-act-on-props-and-be-rendered-using-jsx
  var Icon = props.selectProps.dropdownIndicatorIcon;
  return Icon ? /*#__PURE__*/_react.default.createElement(Icon, null) : null;
};

exports.DropdownIndicator = DropdownIndicator;

function formatDateTimeZoneIntoIso(date, time, zone) {
  // 12:00 => 12:00, 1:00 => 01:00
  var needsLeadingZero = /^\d:/;
  var sanitizedTime = needsLeadingZero.test(time) ? "0".concat(time) : time;
  return "".concat(date, "T").concat(sanitizedTime).concat(zone);
}