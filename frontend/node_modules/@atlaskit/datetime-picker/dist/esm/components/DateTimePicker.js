import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import styled from '@emotion/styled'; // eslint-disable-next-line no-restricted-imports

import { format, isValid, parse } from 'date-fns';
import pick from 'lodash/pick';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import SelectClearIcon from '@atlaskit/icon/glyph/select-clear';
import { mergeStyles } from '@atlaskit/select';
import * as colors from '@atlaskit/theme/colors';
import { borderRadius, gridSize } from '@atlaskit/theme/constants';
import { defaultTimes, formatDateTimeZoneIntoIso } from '../internal';
import DatePicker from './DatePicker';
import TimePicker from './TimePicker';
var packageName = "@atlaskit/datetime-picker";
var packageVersion = "10.2.1";
/* eslint-disable react/no-unused-prop-types */

var getBorder = function getBorder(_ref) {
  var appearance = _ref.appearance,
      isFocused = _ref.isFocused,
      isInvalid = _ref.isInvalid;
  var color = colors.N20;

  if (appearance === 'subtle') {
    color = 'transparent';
  }

  if (isFocused) {
    color = colors.B100;
  }

  if (isInvalid) {
    color = colors.R400;
  }

  return "border: 2px solid ".concat(color, ";");
};

var getBorderColorHover = function getBorderColorHover(_ref2) {
  var isFocused = _ref2.isFocused,
      isInvalid = _ref2.isInvalid,
      isDisabled = _ref2.isDisabled;
  var color = colors.N30;

  if (isFocused || isDisabled) {
    return "";
  }

  if (isInvalid) {
    color = colors.R400;
  }

  return "border-color: ".concat(color, ";");
};

var getBackgroundColor = function getBackgroundColor(_ref3) {
  var appearance = _ref3.appearance,
      isFocused = _ref3.isFocused;
  var color = colors.N20;

  if (isFocused) {
    color = colors.N0;
  }

  if (appearance === 'subtle') {
    color = 'transparent';
  }

  return "background-color: ".concat(color, ";");
};

var getBackgroundColorHover = function getBackgroundColorHover(_ref4) {
  var isFocused = _ref4.isFocused,
      isInvalid = _ref4.isInvalid,
      isDisabled = _ref4.isDisabled;
  var color = colors.N30;

  if (isFocused || isDisabled) {
    return "";
  }

  if (isInvalid) {
    color = colors.N0;
  }

  return "background-color: ".concat(color, ";");
};

var Flex = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n  ", "\n  border-radius: ", "px;\n  display: flex;\n  transition: background-color 200ms ease-in-out, border-color 200ms ease-in-out;\n  &:hover {\n    cursor: ", ";\n    ", "\n    ", "\n  }\n"])), getBackgroundColor, getBorder, borderRadius(), function (props) {
  return props.isDisabled ? 'default' : 'pointer';
}, getBackgroundColorHover, getBorderColorHover); // Make DatePicker 50% the width of DateTimePicker
// If rendering an icon container, shrink the TimePicker

var DatePickerContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex-basis: 50%;\n  flex-grow: 1;\n  flex-shrink: 0;\n"])));
var TimePickerContainer = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex-basis: 50%;\n  flex-grow: 1;\n"])));
var ICON_PADDING = 2;
var IconContainer = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  flex-basis: inherit;\n  padding-left: ", "px;\n  padding-right: ", "px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  display: flex;\n  align-items: center;\n  color: ", ";\n  transition: color 150ms;\n  &:hover {\n    color: ", ";\n  }\n"])), ICON_PADDING * 2, gridSize(), colors.N70, colors.N500); // react-select overrides (via @atlaskit/select).

var styles = {
  control: function control(style) {
    return _objectSpread(_objectSpread({}, style), {}, {
      backgroundColor: 'transparent',
      border: 2,
      borderRadius: 0,
      paddingLeft: 0,
      ':hover': {
        backgroundColor: 'transparent',
        cursor: 'inherit'
      }
    });
  }
};
var dateTimePickerDefaultProps = {
  appearance: 'default',
  autoFocus: false,
  isDisabled: false,
  name: '',
  onBlur: function onBlur(event) {},
  onChange: function onChange(value) {},
  onFocus: function onFocus(event) {},
  innerProps: {},
  id: '',
  defaultValue: '',
  timeIsEditable: false,
  isInvalid: false,
  datePickerProps: {},
  timePickerProps: {},
  datePickerSelectProps: {},
  timePickerSelectProps: {},
  times: defaultTimes,
  spacing: 'default',
  locale: 'en-US' // Not including a default prop for value as it will
  // Make the component a controlled component

};

var DateTimePicker = /*#__PURE__*/function (_React$Component) {
  _inherits(DateTimePicker, _React$Component);

  var _super = _createSuper(DateTimePicker);

  function DateTimePicker() {
    var _this;

    _classCallCheck(this, DateTimePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      active: 0,
      dateValue: '',
      isFocused: false,
      timeValue: '',
      value: _this.props.defaultValue,
      zoneValue: ''
    });

    _defineProperty(_assertThisInitialized(_this), "getSafeState", function () {
      var mappedState = _objectSpread(_objectSpread({}, _this.state), pick(_this.props, ['value']));

      return _objectSpread(_objectSpread({}, mappedState), _this.parseValue(mappedState.value, mappedState.dateValue, mappedState.timeValue, mappedState.zoneValue));
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function (event) {
      _this.setState({
        isFocused: false
      });

      _this.props.onBlur(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function (event) {
      _this.setState({
        isFocused: true
      });

      _this.props.onFocus(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onDateChange", function (dateValue) {
      _this.onValueChange(_objectSpread(_objectSpread({}, _this.getSafeState()), {}, {
        dateValue: dateValue
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onTimeChange", function (timeValue) {
      _this.onValueChange(_objectSpread(_objectSpread({}, _this.getSafeState()), {}, {
        timeValue: timeValue
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onClear", function () {
      _this.onValueChange(_objectSpread(_objectSpread({}, _this.getSafeState()), {}, {
        timeValue: '',
        dateValue: ''
      }));
    });

    return _this;
  }

  _createClass(DateTimePicker, [{
    key: "parseValue",
    value: function parseValue(value, dateValue, timeValue, zoneValue) {
      if (this.props.parseValue) {
        return this.props.parseValue(value, dateValue, timeValue, zoneValue);
      }

      var parsed = parse(value);
      var valid = isValid(parsed);
      return valid ? {
        dateValue: format(parsed, 'YYYY-MM-DD'),
        timeValue: format(parsed, 'HH:mm'),
        zoneValue: format(parsed, 'ZZ')
      } : {
        dateValue: dateValue,
        timeValue: timeValue,
        zoneValue: zoneValue
      };
    }
  }, {
    key: "onValueChange",
    value: function onValueChange(_ref5) {
      var dateValue = _ref5.dateValue,
          timeValue = _ref5.timeValue,
          zoneValue = _ref5.zoneValue;
      this.setState({
        dateValue: dateValue,
        timeValue: timeValue,
        zoneValue: zoneValue
      });

      if (dateValue && timeValue) {
        var _value = formatDateTimeZoneIntoIso(dateValue, timeValue, zoneValue);

        var _this$parseValue = this.parseValue(_value, dateValue, timeValue, zoneValue),
            parsedZone = _this$parseValue.zoneValue;

        var valueWithValidZone = formatDateTimeZoneIntoIso(dateValue, timeValue, parsedZone);
        this.setState({
          value: valueWithValidZone
        });
        this.props.onChange(valueWithValidZone); // If the date or time value was cleared when there is an existing datetime value, then clear the value.
      } else if (this.getSafeState().value) {
        this.setState({
          value: ''
        });
        this.props.onChange('');
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          id = _this$props.id,
          innerProps = _this$props.innerProps,
          isDisabled = _this$props.isDisabled,
          name = _this$props.name,
          timeIsEditable = _this$props.timeIsEditable,
          dateFormat = _this$props.dateFormat,
          datePickerProps = _this$props.datePickerProps,
          datePickerSelectProps = _this$props.datePickerSelectProps,
          timePickerProps = _this$props.timePickerProps,
          timePickerSelectProps = _this$props.timePickerSelectProps,
          times = _this$props.times,
          timeFormat = _this$props.timeFormat,
          locale = _this$props.locale,
          testId = _this$props.testId;

      var _this$getSafeState = this.getSafeState(),
          isFocused = _this$getSafeState.isFocused,
          value = _this$getSafeState.value,
          dateValue = _this$getSafeState.dateValue,
          timeValue = _this$getSafeState.timeValue;

      var bothProps = {
        isDisabled: isDisabled,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        isInvalid: this.props.isInvalid,
        appearance: this.props.appearance,
        spacing: this.props.spacing
      };
      var _datePickerSelectProp = datePickerSelectProps.styles,
          datePickerStyles = _datePickerSelectProp === void 0 ? {} : _datePickerSelectProp;
      var _timePickerSelectProp = timePickerSelectProps.styles,
          timePickerStyles = _timePickerSelectProp === void 0 ? {} : _timePickerSelectProp;

      var mergedDatePickerSelectProps = _objectSpread(_objectSpread({}, datePickerSelectProps), {}, {
        styles: mergeStyles(styles, datePickerStyles)
      });

      var mergedTimePickerSelectProps = _objectSpread(_objectSpread({}, timePickerSelectProps), {}, {
        styles: mergeStyles(styles, timePickerStyles)
      }); // Render DateTimePicker's IconContainer when a value has been filled
      // Don't use Date or TimePicker's because they can't be customised


      var isClearable = Boolean(dateValue || timeValue);
      return /*#__PURE__*/React.createElement(Flex, _extends({}, innerProps, {
        isFocused: isFocused,
        isDisabled: isDisabled,
        isInvalid: this.props.isInvalid,
        appearance: this.props.appearance
      }), /*#__PURE__*/React.createElement("input", {
        name: name,
        type: "hidden",
        value: value
      }), /*#__PURE__*/React.createElement(DatePickerContainer, null, /*#__PURE__*/React.createElement(DatePicker, _extends({}, bothProps, {
        autoFocus: autoFocus,
        dateFormat: dateFormat,
        hideIcon: true,
        id: id,
        onChange: this.onDateChange,
        selectProps: mergedDatePickerSelectProps,
        value: dateValue,
        locale: locale,
        testId: testId && "".concat(testId, "--datepicker")
      }, datePickerProps))), /*#__PURE__*/React.createElement(TimePickerContainer, null, /*#__PURE__*/React.createElement(TimePicker, _extends({}, bothProps, {
        hideIcon: true,
        onChange: this.onTimeChange,
        selectProps: mergedTimePickerSelectProps,
        value: timeValue,
        timeIsEditable: timeIsEditable,
        times: times,
        timeFormat: timeFormat,
        locale: locale,
        testId: testId && "".concat(testId, "--timepicker")
      }, timePickerProps))), isClearable ?
      /*#__PURE__*/
      // eslint-disable-next-line styled-components-a11y/click-events-have-key-events,styled-components-a11y/no-static-element-interactions
      React.createElement(IconContainer, {
        onClick: this.onClear,
        "data-testid": testId && "".concat(testId, "--icon--container")
      }, /*#__PURE__*/React.createElement(SelectClearIcon, {
        size: "small",
        primaryColor: "inherit",
        label: "clear"
      })) : null);
    }
  }]);

  return DateTimePicker;
}(React.Component);

_defineProperty(DateTimePicker, "defaultProps", dateTimePickerDefaultProps);

export { DateTimePicker as DateTimePickerWithoutAnalytics };
export default withAnalyticsContext({
  componentName: 'dateTimePicker',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onChange: createAndFireEvent('atlaskit')({
    action: 'changed',
    actionSubject: 'dateTimePicker',
    attributes: {
      componentName: 'dateTimePicker',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(DateTimePicker));