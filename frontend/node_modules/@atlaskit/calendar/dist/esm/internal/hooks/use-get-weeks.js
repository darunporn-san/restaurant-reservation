import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useMemo } from 'react';
import { daysPerWeek } from '../constants';
import dateToString from '../utils/date-to-string';
import getBaseCalendar from '../utils/get-base-calendar';

function useGetCalendarWithSixthWeek(calendar, _ref) {
  var month = _ref.month,
      year = _ref.year,
      weekStartDay = _ref.weekStartDay;
  var shouldDisplaySixthWeek = calendar.length % 6;
  var calendarLastValue = calendar[calendar.length - 1];
  return useMemo(function () {
    // Some months jump between 5 and 6 weeks to display. In some cases 4 (Feb
    // with the 1st on a Monday etc). This ensures the UI doesn't jump around by
    // catering to always showing 6 weeks.
    if (shouldDisplaySixthWeek) {
      var lastDayIsSibling = calendarLastValue.siblingMonth;
      var sliceStart = lastDayIsSibling ? daysPerWeek : 0;
      return getBaseCalendar(year, month, {
        weekStartDay: weekStartDay
      }).slice(sliceStart, sliceStart + daysPerWeek).map(function (date) {
        return _objectSpread(_objectSpread({}, date), {}, {
          siblingMonth: true
        });
      });
    }
  }, [calendarLastValue, month, shouldDisplaySixthWeek, weekStartDay, year]);
}

export default function useGetWeeks(_ref2) {
  var day = _ref2.day,
      month = _ref2.month,
      year = _ref2.year,
      today = _ref2.today,
      disabled = _ref2.disabled,
      selected = _ref2.selected,
      previouslySelected = _ref2.previouslySelected,
      weekStartDay = _ref2.weekStartDay;
  var calendar = useMemo(function () {
    return getBaseCalendar(year, month - 1, {
      weekStartDay: weekStartDay
    });
  }, [month, weekStartDay, year]);
  var calendarWithSixthWeek = useGetCalendarWithSixthWeek(calendar, {
    month: month,
    year: year,
    weekStartDay: weekStartDay
  });

  if (calendarWithSixthWeek) {
    calendar.push.apply(calendar, _toConsumableArray(calendarWithSixthWeek));
  }

  return useMemo(function () {
    var weeks = [];
    calendar.forEach(function (date) {
      var dateAsString = dateToString(date, {
        fixMonth: true
      });
      var week;

      if (date.weekDay === weekStartDay) {
        week = {
          id: dateAsString,
          values: []
        };
        weeks.push(week);
      } else {
        week = weeks[weeks.length - 1];
      }

      var isDisabled = disabled.indexOf(dateAsString) > -1;
      var isFocused = day === date.day && !date.siblingMonth;
      var isPreviouslySelected = !isDisabled && previouslySelected.indexOf(dateAsString) > -1;
      var isSelected = !isDisabled && selected.indexOf(dateAsString) > -1;
      var isSiblingMonth = !!date.siblingMonth;
      var isToday = today === dateAsString;
      week.values.push({
        id: dateAsString,
        isDisabled: isDisabled,
        isFocused: isFocused,
        isToday: isToday,
        month: date.month + 1,
        isPreviouslySelected: isPreviouslySelected,
        isSelected: isSelected,
        isSiblingMonth: isSiblingMonth,
        year: date.year,
        day: date.day
      });
    });
    return weeks;
  }, [calendar, day, disabled, previouslySelected, selected, today, weekStartDay]);
}