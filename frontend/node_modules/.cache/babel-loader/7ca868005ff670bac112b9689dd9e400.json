{"ast":null,"code":"var map24 = {\n  '12': '12',\n  '01': '13',\n  '02': '14',\n  '03': '15',\n  '04': '16',\n  '05': '17',\n  '06': '18',\n  '07': '19',\n  '08': '20',\n  '09': '21',\n  '10': '22',\n  '11': '23'\n};\nexport function isValid(timeString) {\n  var time = timeString.trim().match(/(\\d+)(?::(\\d\\d))?\\s*(a|p)?/i);\n  var time24hr = timeString.trim().match(/(\\d\\d)[:.]?(\\d\\d)/);\n  var num = timeString.replace(/[^0-9]/g, '');\n\n  if (!time && !time24hr) {\n    return false;\n  }\n\n  if (time && !time[1]) {\n    return false;\n  }\n\n  if (num.length > 4) {\n    return false;\n  }\n\n  if (num.length === 2 && parseInt(num, 10) > 12) {\n    return false;\n  }\n\n  return true;\n}\nexport function removeSpacer(time) {\n  return time.replace(/[:.]/, '');\n}\nexport function formatSemi24(time) {\n  if (time.length === 1) {\n    return \"0\".concat(time, \"00\");\n  }\n\n  if (time.length === 2) {\n    return \"\".concat(time, \"00\");\n  }\n\n  if (time.length === 3) {\n    return \"0\".concat(time);\n  }\n\n  return time;\n}\nexport function checkHour(hour, meridiem) {\n  if (hour > '24') {\n    return null;\n  }\n\n  if (hour === '12' && meridiem === 'a') {\n    return '00';\n  }\n\n  if (hour < '12' && meridiem === 'p') {\n    return map24[hour];\n  }\n\n  return hour;\n}\nexport function checkMinute(minute) {\n  if (minute > '59') {\n    return null;\n  }\n\n  return minute;\n}\nexport function convertTo24hrTime(time) {\n  var timeArray = time.split(/(p|a)/);\n  var meridiem = timeArray[1];\n  var semi24 = formatSemi24(timeArray[0]);\n  var hour = checkHour(semi24.substring(0, 2), meridiem);\n  var minute = checkMinute(semi24.substring(2, 4));\n\n  if (!hour || !minute) {\n    return null;\n  }\n\n  return {\n    hour: parseInt(hour, 10),\n    minute: parseInt(minute, 10)\n  };\n}\nexport function assignToDate(time) {\n  var dateTime = new Date();\n  dateTime.setHours(time.hour);\n  dateTime.setMinutes(time.minute);\n  dateTime.setSeconds(0, 0);\n  return dateTime;\n}\nexport default function (time) {\n  if (!isValid(time.toString())) {\n    return 'invalid time format';\n  }\n\n  var time1 = removeSpacer(time.toString());\n  var time2 = convertTo24hrTime(time1);\n\n  if (!time2) {\n    return 'invalid time format';\n  }\n\n  return assignToDate(time2);\n}","map":{"version":3,"sources":["/Users/dsmint/restaurantreservation/node_modules/@atlaskit/datetime-picker/dist/esm/internal/parseTime.js"],"names":["map24","isValid","timeString","time","trim","match","time24hr","num","replace","length","parseInt","removeSpacer","formatSemi24","concat","checkHour","hour","meridiem","checkMinute","minute","convertTo24hrTime","timeArray","split","semi24","substring","assignToDate","dateTime","Date","setHours","setMinutes","setSeconds","toString","time1","time2"],"mappings":"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","sourcesContent":["var map24 = {\n  '12': '12',\n  '01': '13',\n  '02': '14',\n  '03': '15',\n  '04': '16',\n  '05': '17',\n  '06': '18',\n  '07': '19',\n  '08': '20',\n  '09': '21',\n  '10': '22',\n  '11': '23'\n};\nexport function isValid(timeString) {\n  var time = timeString.trim().match(/(\\d+)(?::(\\d\\d))?\\s*(a|p)?/i);\n  var time24hr = timeString.trim().match(/(\\d\\d)[:.]?(\\d\\d)/);\n  var num = timeString.replace(/[^0-9]/g, '');\n\n  if (!time && !time24hr) {\n    return false;\n  }\n\n  if (time && !time[1]) {\n    return false;\n  }\n\n  if (num.length > 4) {\n    return false;\n  }\n\n  if (num.length === 2 && parseInt(num, 10) > 12) {\n    return false;\n  }\n\n  return true;\n}\nexport function removeSpacer(time) {\n  return time.replace(/[:.]/, '');\n}\nexport function formatSemi24(time) {\n  if (time.length === 1) {\n    return \"0\".concat(time, \"00\");\n  }\n\n  if (time.length === 2) {\n    return \"\".concat(time, \"00\");\n  }\n\n  if (time.length === 3) {\n    return \"0\".concat(time);\n  }\n\n  return time;\n}\nexport function checkHour(hour, meridiem) {\n  if (hour > '24') {\n    return null;\n  }\n\n  if (hour === '12' && meridiem === 'a') {\n    return '00';\n  }\n\n  if (hour < '12' && meridiem === 'p') {\n    return map24[hour];\n  }\n\n  return hour;\n}\nexport function checkMinute(minute) {\n  if (minute > '59') {\n    return null;\n  }\n\n  return minute;\n}\nexport function convertTo24hrTime(time) {\n  var timeArray = time.split(/(p|a)/);\n  var meridiem = timeArray[1];\n  var semi24 = formatSemi24(timeArray[0]);\n  var hour = checkHour(semi24.substring(0, 2), meridiem);\n  var minute = checkMinute(semi24.substring(2, 4));\n\n  if (!hour || !minute) {\n    return null;\n  }\n\n  return {\n    hour: parseInt(hour, 10),\n    minute: parseInt(minute, 10)\n  };\n}\nexport function assignToDate(time) {\n  var dateTime = new Date();\n  dateTime.setHours(time.hour);\n  dateTime.setMinutes(time.minute);\n  dateTime.setSeconds(0, 0);\n  return dateTime;\n}\nexport default function (time) {\n  if (!isValid(time.toString())) {\n    return 'invalid time format';\n  }\n\n  var time1 = removeSpacer(time.toString());\n  var time2 = convertTo24hrTime(time1);\n\n  if (!time2) {\n    return 'invalid time format';\n  }\n\n  return assignToDate(time2);\n}"]},"metadata":{},"sourceType":"module"}