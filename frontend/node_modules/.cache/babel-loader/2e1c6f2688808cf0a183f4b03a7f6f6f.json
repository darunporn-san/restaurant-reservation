{"ast":null,"code":"/**\n * A numerical representation of a date:\n *  - year: any positive integer\n *  - month: 1 - 12 (Jan - Dec)\n *  - day: 1 - [28, 29, 30, 31] (depending on month)\n */\nexport var toDateObj = function toDateObj(date) {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate()\n  };\n};\nexport var toDate = function toDate(date) {\n  return (// The 'proper' month is stored in a DateObj but Date expects month index\n    new Date(date.year, date.month - 1, date.day)\n  );\n};\n/**\n * Determines if the input year is a leap year\n * See: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n *\n * @param year: integer\n * @returns boolean\n */\n\nexport var isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\n/**\n * Determines the number of days in specified month on the specified year\n *\n * @param year: number\n * @param month: number\n * @returns number\n */\n\nexport var getDaysInMonth = function getDaysInMonth(year, month) {\n  // February depends on leap year\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n};\n/**\n * Determines whether or not the specified DateObj will create a valid and\n * logical Date.\n *\n * @param date: DateObj\n * @returns boolean\n */\n\nexport var isValid = function isValid(date) {\n  var year = date.year,\n      month = date.month,\n      day = date.day;\n  var daysInMonth = getDaysInMonth(year, month);\n  return 1 <= month && month <= 12 && 1 <= day && day <= daysInMonth;\n};\n/**\n * Normalizes the specified DateObj, replacing NaN year and zero/NaN month/day\n * with backup values. It also replaces 'short' years (0 - 99) with their 'full'\n * equivalent (2000 - 2099)\n *\n * @param date: DateObj\n * @returns DateObj\n */\n\nexport var normalizeDate = function normalizeDate(date) {\n  var now = toDateObj(new Date());\n  var year = date.year,\n      month = date.month,\n      day = date.day; // 19 should evaluate to 2019\n\n  var fullYear = year < 100 ? 2000 + year : year; // Missing date pieces are filled in with their current date values\n\n  var normalizedYear = !isNaN(fullYear) ? fullYear : now.year;\n  var normalizedMonth = !isNaN(month) && month !== 0 ? month : now.month;\n  var normalizedDay = !isNaN(day) && day !== 0 ? day : now.day;\n  return {\n    year: normalizedYear,\n    month: normalizedMonth,\n    day: normalizedDay\n  };\n};","map":{"version":3,"sources":["/Users/dsmint/restaurantreservation/node_modules/@atlaskit/locale/dist/esm/internal/date-parser/utils.js"],"names":["toDateObj","date","year","getFullYear","month","getMonth","day","getDate","toDate","Date","isLeapYear","getDaysInMonth","isValid","daysInMonth","normalizeDate","now","fullYear","normalizedYear","isNaN","normalizedMonth","normalizedDay"],"mappings":"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","sourcesContent":["/**\n * A numerical representation of a date:\n *  - year: any positive integer\n *  - month: 1 - 12 (Jan - Dec)\n *  - day: 1 - [28, 29, 30, 31] (depending on month)\n */\nexport var toDateObj = function toDateObj(date) {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate()\n  };\n};\nexport var toDate = function toDate(date) {\n  return (// The 'proper' month is stored in a DateObj but Date expects month index\n    new Date(date.year, date.month - 1, date.day)\n  );\n};\n/**\n * Determines if the input year is a leap year\n * See: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n *\n * @param year: integer\n * @returns boolean\n */\n\nexport var isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\n/**\n * Determines the number of days in specified month on the specified year\n *\n * @param year: number\n * @param month: number\n * @returns number\n */\n\nexport var getDaysInMonth = function getDaysInMonth(year, month) {\n  // February depends on leap year\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n};\n/**\n * Determines whether or not the specified DateObj will create a valid and\n * logical Date.\n *\n * @param date: DateObj\n * @returns boolean\n */\n\nexport var isValid = function isValid(date) {\n  var year = date.year,\n      month = date.month,\n      day = date.day;\n  var daysInMonth = getDaysInMonth(year, month);\n  return 1 <= month && month <= 12 && 1 <= day && day <= daysInMonth;\n};\n/**\n * Normalizes the specified DateObj, replacing NaN year and zero/NaN month/day\n * with backup values. It also replaces 'short' years (0 - 99) with their 'full'\n * equivalent (2000 - 2099)\n *\n * @param date: DateObj\n * @returns DateObj\n */\n\nexport var normalizeDate = function normalizeDate(date) {\n  var now = toDateObj(new Date());\n  var year = date.year,\n      month = date.month,\n      day = date.day; // 19 should evaluate to 2019\n\n  var fullYear = year < 100 ? 2000 + year : year; // Missing date pieces are filled in with their current date values\n\n  var normalizedYear = !isNaN(fullYear) ? fullYear : now.year;\n  var normalizedMonth = !isNaN(month) && month !== 0 ? month : now.month;\n  var normalizedDay = !isNaN(day) && day !== 0 ? day : now.day;\n  return {\n    year: normalizedYear,\n    month: normalizedMonth,\n    day: normalizedDay\n  };\n};"]},"metadata":{},"sourceType":"module"}