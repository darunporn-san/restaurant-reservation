import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import React, { forwardRef, memo, useCallback, useEffect, useMemo, useRef } from 'react';
import { jsx } from '@emotion/core';
import noop from '@atlaskit/ds-lib/noop';
import { dateCellStyle as getDateCellStyle } from '../styles/date';
var Date = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Date(_ref, ref) {
  var day = _ref.children,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isFocused = _ref.isFocused,
      isFocused = _ref$isFocused === void 0 ? false : _ref$isFocused,
      _ref$isToday = _ref.isToday,
      isToday = _ref$isToday === void 0 ? false : _ref$isToday,
      month = _ref.month,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      _ref$isPreviouslySele = _ref.isPreviouslySelected,
      isPreviouslySelected = _ref$isPreviouslySele === void 0 ? false : _ref$isPreviouslySele,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$isSibling = _ref.isSibling,
      isSibling = _ref$isSibling === void 0 ? false : _ref$isSibling,
      year = _ref.year,
      mode = _ref.mode,
      testId = _ref.testId;
  var dateRef = useRef({
    day: day,
    month: month,
    year: year,
    isDisabled: isDisabled
  });
  useEffect(function () {
    dateRef.current = {
      day: day,
      month: month,
      year: year,
      isDisabled: isDisabled
    };
  }, [day, month, year, isDisabled]);
  var handleClick = useCallback(function () {
    var _dateRef$current = dateRef.current,
        dayValue = _dateRef$current.day,
        monthValue = _dateRef$current.month,
        yearValue = _dateRef$current.year,
        isDisabledValue = _dateRef$current.isDisabled;

    if (!isDisabledValue) {
      onClick({
        day: dayValue,
        month: monthValue,
        year: yearValue
      });
    }
  }, [onClick]);
  var cellControlProps = {
    'data-disabled': isDisabled || undefined,
    'data-focused': isFocused || undefined,
    'data-prev-selected': isPreviouslySelected || undefined,
    'data-selected': isSelected || undefined,
    'data-sibling': isSibling || undefined,
    'data-today': isToday || undefined
  };
  var dateCellStyle = useMemo(function () {
    return getDateCellStyle(mode);
  }, [mode]);
  return jsx("button", _extends({
    css: dateCellStyle,
    "aria-selected": isSelected ? 'true' : 'false',
    tabIndex: isSelected ? 0 : -1,
    role: "gridcell",
    onClick: handleClick,
    ref: ref
  }, cellControlProps, {
    "data-testid": testId && isSelected ? "".concat(testId, "--selected-day") : undefined
  }), day);
}));
Date.displayName = 'Date';
export default Date;