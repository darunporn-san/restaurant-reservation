import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { gridSize, fontFamily } from '@atlaskit/theme/constants';
import * as colors from '@atlaskit/theme/colors';
var BORDER_WIDTH = 2;
var ICON_PADDING = 2;
var paddingExcludingBorder = gridSize() - BORDER_WIDTH;
export default function baseStyles(validationState, isCompact) {
  return {
    container: function container(css, _ref) {
      var isDisabled = _ref.isDisabled;
      return _objectSpread(_objectSpread({}, css), {}, {
        fontFamily: fontFamily(),
        // react-select disables pointer events when isDisabled is true.
        // We override this and make the inner container turn it off instead.
        pointerEvents: 'all',
        cursor: isDisabled ? 'not-allowed' : undefined
      });
    },
    control: function control(css, _ref2) {
      var isFocused = _ref2.isFocused,
          isDisabled = _ref2.isDisabled;
      var borderColor = isFocused ? colors.B100 : colors.N20;
      var backgroundColor = isFocused ? colors.N0 : colors.N20;

      if (isDisabled) {
        backgroundColor = colors.N20;
      }

      if (validationState === 'error') {
        borderColor = colors.R400;
      }

      if (validationState === 'success') {
        borderColor = colors.G400;
      }

      var borderColorHover = isFocused ? colors.B100 : colors.N30;

      if (validationState === 'error') {
        borderColorHover = colors.R400;
      }

      if (validationState === 'success') {
        borderColorHover = colors.G400;
      }

      var transitionDuration = '200ms';
      return _objectSpread(_objectSpread({}, css), {}, {
        // Turn pointer events off when disabled - this makes it so hover etc don't work.
        pointerEvents: isDisabled ? 'none' : undefined,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderStyle: 'solid',
        borderRadius: '3px',
        borderWidth: '2px',
        boxShadow: 'none',
        minHeight: isCompact ? gridSize() * 4 : gridSize() * 5,
        padding: 0,
        transition: "background-color ".concat(transitionDuration, " ease-in-out,\n        border-color ").concat(transitionDuration, " ease-in-out"),
        '::-webkit-scrollbar': {
          height: gridSize(),
          width: gridSize()
        },
        '::-webkit-scrollbar-corner': {
          display: 'none'
        },
        ':hover': {
          '::-webkit-scrollbar-thumb': {
            backgroundColor: 'rgba(0,0,0,0.2)'
          },
          cursor: 'pointer',
          backgroundColor: isFocused ? colors.N0 : colors.N30,
          borderColor: borderColorHover
        },
        '::-webkit-scrollbar-thumb:hover': {
          backgroundColor: 'rgba(0,0,0,0.4)'
        }
      });
    },
    valueContainer: function valueContainer(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingLeft: paddingExcludingBorder,
        paddingRight: paddingExcludingBorder,
        paddingBottom: isCompact ? 0 : 2,
        paddingTop: isCompact ? 0 : 2
      });
    },
    clearIndicator: function clearIndicator(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        color: colors.N70,
        paddingLeft: ICON_PADDING,
        paddingRight: ICON_PADDING,
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: colors.N500
        }
      });
    },
    loadingIndicator: function loadingIndicator(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6
      });
    },
    dropdownIndicator: function dropdownIndicator(css, _ref3) {
      var isDisabled = _ref3.isDisabled;
      var color = colors.N500;

      if (isDisabled) {
        color = colors.N70;
      }

      return _objectSpread(_objectSpread({}, css), {}, {
        color: color,
        paddingLeft: ICON_PADDING,
        paddingRight: ICON_PADDING,
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: colors.N200
        }
      });
    },
    indicatorsContainer: function indicatorsContainer(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingRight: paddingExcludingBorder - ICON_PADDING
      });
    },
    option: function option(css, _ref4) {
      var isFocused = _ref4.isFocused,
          isSelected = _ref4.isSelected,
          isDisabled = _ref4.isDisabled;
      var color;

      if (isDisabled) {
        color = colors.N70;
      } else if (isSelected) {
        color = colors.N0;
      }

      var backgroundColor;

      if (isDisabled) {
        backgroundColor = undefined;
      } else if (isSelected) {
        backgroundColor = colors.N500;
      } else if (isFocused) {
        backgroundColor = colors.N30;
      }

      var cursor = isDisabled ? 'not-allowed' : undefined;
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingTop: '6px',
        paddingBottom: '6px',
        backgroundColor: backgroundColor,
        color: color,
        cursor: cursor
      });
    },
    placeholder: function placeholder(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        color: colors.N100
      });
    },
    singleValue: function singleValue(css, _ref5) {
      var isDisabled = _ref5.isDisabled;
      return _objectSpread(_objectSpread({}, css), {}, {
        color: isDisabled ? colors.N70 : colors.N800,
        lineHeight: "".concat(gridSize() * 2, "px") // 16px

      });
    },
    menuList: function menuList(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        paddingTop: gridSize(),
        paddingBottom: gridSize()
      });
    },
    multiValue: function multiValue(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        borderRadius: '2px',
        backgroundColor: colors.N40,
        color: colors.N500,
        maxWidth: '100%'
      });
    },
    multiValueLabel: function multiValueLabel(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        padding: '2px',
        paddingRight: '2px'
      });
    },
    multiValueRemove: function multiValueRemove(css, _ref6) {
      var isFocused = _ref6.isFocused;
      return _objectSpread(_objectSpread({}, css), {}, {
        backgroundColor: isFocused && colors.R75,
        color: isFocused && colors.R400,
        paddingLeft: '2px',
        paddingRight: '2px',
        borderRadius: '0px 2px 2px 0px',
        ':hover': {
          color: colors.R400,
          backgroundColor: colors.R75
        }
      });
    }
  };
}