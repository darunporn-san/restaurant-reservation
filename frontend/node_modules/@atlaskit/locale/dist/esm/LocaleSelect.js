import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import Select from '@atlaskit/select';
export var defaultLocales = [{
  value: 'en-AU',
  label: 'English (Australia)'
}, {
  value: 'en-GB',
  label: 'English (United Kingdom)'
}, {
  value: 'en-US',
  label: 'English (United States)'
}, {
  value: 'ko-KR',
  label: '한국어 (대한민국)'
}, {
  value: 'nl-NL',
  label: 'Nederlands (Nederland)'
}, {
  value: 'ru-RU',
  label: 'русский (Россия)'
}, {
  value: 'hu-HU',
  label: 'magyar (Magyarország)'
}, {
  value: 'pt-BR',
  label: 'português (Brasil)'
}, {
  value: 'de-DE',
  label: 'Deutsch (Deutschland)'
}, {
  value: 'is-IS',
  label: 'íslenska (Ísland)'
}, {
  value: 'cs-CZ',
  label: 'čeština (Česká republika)'
}, {
  value: 'da-DK',
  label: 'Dansk (Danmark)'
}, {
  value: 'et-EE',
  label: 'Eesti (Eesti)'
}, {
  value: 'pl-PL',
  label: 'polski (Polska)'
}, {
  value: 'sk-SK',
  label: 'Slovenčina (Slovenská republika)'
}, {
  value: 'it-IT',
  label: 'italiano (Italia)'
}, {
  value: 'pt-PT',
  label: 'português (Portugal)'
}, {
  value: 'vi-VN',
  label: 'Tiếng Việt (Việt Nam)'
}, {
  value: 'zh-CN',
  label: '中文 (中国)'
}, {
  value: 'es-ES',
  label: 'español (España)'
}, {
  value: 'sv-SE',
  label: 'svenska (Sverige)'
}, {
  value: 'ja-JP',
  label: '日本語 (日本)'
}, {
  value: 'fi-FI',
  label: 'suomi (Suomi)'
}, {
  value: 'fr-FR',
  label: 'français (France)'
}, {
  value: 'ro-RO',
  label: 'română (România)'
}, {
  value: 'no-NO',
  label: 'norsk (Norge)'
}];

var LocaleSelect = /*#__PURE__*/function (_Component) {
  _inherits(LocaleSelect, _Component);

  var _super = _createSuper(LocaleSelect);

  function LocaleSelect() {
    _classCallCheck(this, LocaleSelect);

    return _super.apply(this, arguments);
  }

  _createClass(LocaleSelect, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          locales = _this$props.locales,
          defaultLocale = _this$props.defaultLocale,
          onLocaleChange = _this$props.onLocaleChange;
      return /*#__PURE__*/React.createElement(Select, {
        options: locales,
        defaultValue: defaultLocale,
        onChange: function onChange(locale) {
          return onLocaleChange(locale);
        },
        styles: {
          container: function container(css) {
            return _objectSpread(_objectSpread({}, css), {}, {
              width: 300,
              margin: '0.5em 0'
            });
          },
          dropdownIndicator: function dropdownIndicator(css) {
            return _objectSpread(_objectSpread({}, css), {}, {
              paddingLeft: 0
            });
          },
          menu: function menu(css) {
            return _objectSpread(_objectSpread({}, css), {}, {
              width: 300
            });
          }
        }
      });
    }
  }]);

  return LocaleSelect;
}(Component);

_defineProperty(LocaleSelect, "defaultProps", {
  locales: defaultLocales,
  defaultLocale: defaultLocales[0],
  onLocaleChange: function onLocaleChange() {}
});

export { LocaleSelect as default };