import React from 'react';
import { WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { CalendarRef } from '@atlaskit/calendar';
import { LocalizationProvider } from '@atlaskit/locale';
import { ActionMeta, IndicatorComponentType, OptionType, ValueType } from '@atlaskit/select';
import { Appearance, SelectProps, Spacing } from '../types';
export interface Props extends WithAnalyticsEventsProps {
    /**
     * Defines the appearance which can be default or subtle - no borders, background or icon.
     * Appearance values will be ignored if styles are parsed via the selectProps.
     */
    appearance?: Appearance;
    /** Whether or not to auto-focus the field. */
    autoFocus?: boolean;
    /** Default for `isOpen`. */
    defaultIsOpen?: boolean;
    /** Default for `value`. */
    defaultValue?: string;
    /** An array of ISO dates that should be disabled on the calendar. */
    disabled?: string[];
    /** The icon to show in the field. */
    icon?: IndicatorComponentType<OptionType>;
    /** The id of the field. Currently, react-select transforms this to have a "react-select-" prefix, and an "--input" suffix when applied to the input. For example, the id "my-input" would be transformed to "react-select-my-input--input". Keep this in mind when needing to refer to the ID. This will be fixed in an upcoming release. */
    id?: string;
    /** Props to apply to the container. **/
    innerProps?: React.AllHTMLAttributes<HTMLElement>;
    /** Whether or not the field is disabled. */
    isDisabled?: boolean;
    /** Whether or not the dropdown is open. */
    isOpen?: boolean;
    /** The name of the field. */
    name?: string;
    /** Called when the field is blurred. */
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    /** Called when the value changes. The only argument is an ISO time or empty string. */
    onChange?: (value: string) => void;
    /** Called when the field is focused. */
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    /** A function for parsing input characters and transforming them into a Date object. By default parses the date string based off the locale */
    parseInputValue?: (date: string, dateFormat: string) => Date;
    /** A function for formatting the date displayed in the input. By default composes together [date-fn's parse method](https://date-fns.org/v1.29.0/docs/parse) and [date-fn's format method](https://date-fns.org/v1.29.0/docs/format) to return a correctly formatted date string*/
    formatDisplayLabel?: (value: string, dateFormat: string) => string;
    /** Props to apply to the select. This can be used to set options such as placeholder text.
     *  See [here](/packages/design-system/select) for documentation on select props. */
    selectProps?: SelectProps;
    spacing?: Spacing;
    /** The ISO time that should be used as the input value. */
    value?: string;
    /** Indicates current value is invalid & changes border color */
    isInvalid?: boolean;
    /** Hides icon for dropdown indicator. */
    hideIcon?: boolean;
    /** Format the date with a string that is accepted by [date-fns's format function](https://date-fns.org/v1.29.0/docs/format). */
    dateFormat?: string;
    /** Placeholder text displayed in input */
    placeholder?: string;
    /** Locale used to format the the date and calendar. See [DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat) */
    locale?: string;
    /**
     * A `testId` prop is provided for specified elements, which is a unique string that appears as a data attribute `data-testid` in the rendered code, serving as a hook for automated tests
     *  - `{testId}--container` wrapping element of date-picker
     *  - `{testId}--calendar--container` nested calendar component
     **/
    testId?: string;
    /**
     * Start day of the week for the calendar.
     * - `0` sunday (default value)
     * - `1` monday
     * - `2` tuesday
     * - `3` wednesday
     * - `4` thursday
     * - `5` friday
     * - `6` saturday
     */
    weekStartDay?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
}
declare type DatePickerProps = typeof datePickerDefaultProps & Props;
interface State {
    isOpen: boolean;
    /**
     * When being cleared from the icon the DatePicker is blurred.
     * This variable defines whether the default onSelectBlur or onSelectFocus
     * events should behave as normal
     */
    clearingFromIcon: boolean;
    value: string;
    /** Value to be shown in the calendar as selected.  */
    selectedValue: string;
    view: string;
    inputValue: string;
    l10n: LocalizationProvider;
}
declare const datePickerDefaultProps: {
    appearance: Appearance;
    autoFocus: boolean;
    defaultIsOpen: boolean;
    defaultValue: string;
    disabled: string[];
    hideIcon: boolean;
    icon: React.ComponentType<import("react-select").IndicatorProps<OptionType, false, import("@atlaskit/select").GroupType<OptionType>>>;
    id: string;
    innerProps: {};
    isDisabled: boolean;
    isInvalid: boolean;
    name: string;
    onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onChange: (value: string) => void;
    onFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    selectProps: {};
    spacing: Spacing;
    locale: string;
};
declare class DatePicker extends React.Component<DatePickerProps, State> {
    calendarRef: CalendarRef | null;
    containerRef: HTMLElement | null;
    static defaultProps: {
        appearance: Appearance;
        autoFocus: boolean;
        defaultIsOpen: boolean;
        defaultValue: string;
        disabled: string[];
        hideIcon: boolean;
        icon: React.ComponentType<import("react-select").IndicatorProps<OptionType, false, import("@atlaskit/select").GroupType<OptionType>>>;
        id: string;
        innerProps: {};
        isDisabled: boolean;
        isInvalid: boolean;
        name: string;
        onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
        onChange: (value: string) => void;
        onFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
        selectProps: {};
        spacing: Spacing;
        locale: string;
    };
    constructor(props: any);
    componentWillReceiveProps(nextProps: Readonly<DatePickerProps>): void;
    getSafeState: () => {
        inputValue: any;
        isOpen: boolean;
        value: string;
        clearingFromIcon: boolean;
        selectedValue: string;
        view: string;
        l10n: LocalizationProvider;
    };
    isDateDisabled: (date: string) => boolean;
    onCalendarChange: ({ iso }: {
        iso: string;
    }) => void;
    onCalendarSelect: ({ iso }: {
        iso: string;
    }) => void;
    onInputClick: () => void;
    onSelectBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onSelectFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    onSelectInput: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onSelectKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    onClear: () => void;
    onSelectChange: (value: ValueType<OptionType>, action: ActionMeta) => void;
    refCalendar: (ref: CalendarRef | null) => void;
    handleInputChange: (inputValue: string, actionMeta: {}) => void;
    getContainerRef: (ref: HTMLElement | null) => void;
    getSubtleControlStyles: (isOpen: boolean) => {
        border: string;
        backgroundColor: string;
        padding: string;
    };
    /**
     * There are two props that can change how the date is parsed.
     * The priority of props used is:
     *   1. parseInputValue
     *   2. locale
     */
    parseDate: (date: string) => Date | null;
    /**
     * There are multiple props that can change how the date is formatted.
     * The priority of props used is:
     *   1. formatDisplayLabel
     *   2. dateFormat
     *   3. locale
     */
    formatDate: (value: string) => string;
    getPlaceholder: () => string;
    render(): JSX.Element;
}
export { DatePicker as DatePickerWithoutAnalytics };
declare const _default: React.ForwardRefExoticComponent<Pick<Pick<Pick<DatePickerProps, "testId" | "icon" | "disabled" | "appearance" | "defaultValue" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "selectProps" | "innerProps" | "autoFocus" | "defaultIsOpen" | "hideIcon" | "isDisabled" | "isInvalid" | "name" | "spacing" | "locale" | "isOpen" | "parseInputValue" | "formatDisplayLabel" | "value" | "dateFormat" | "weekStartDay">, "testId" | "placeholder" | "isOpen" | "parseInputValue" | "formatDisplayLabel" | "value" | "dateFormat" | "weekStartDay"> & Partial<Pick<Pick<DatePickerProps, "testId" | "icon" | "disabled" | "appearance" | "defaultValue" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "selectProps" | "innerProps" | "autoFocus" | "defaultIsOpen" | "hideIcon" | "isDisabled" | "isInvalid" | "name" | "spacing" | "locale" | "isOpen" | "parseInputValue" | "formatDisplayLabel" | "value" | "dateFormat" | "weekStartDay">, "icon" | "disabled" | "appearance" | "defaultValue" | "id" | "onFocus" | "onBlur" | "onChange" | "selectProps" | "innerProps" | "autoFocus" | "defaultIsOpen" | "hideIcon" | "isDisabled" | "isInvalid" | "name" | "spacing" | "locale">> & Partial<Pick<{
    appearance: Appearance;
    autoFocus: boolean;
    defaultIsOpen: boolean;
    defaultValue: string;
    disabled: string[];
    hideIcon: boolean;
    icon: React.ComponentType<import("react-select").IndicatorProps<OptionType, false, import("@atlaskit/select").GroupType<OptionType>>>;
    id: string;
    innerProps: {};
    isDisabled: boolean;
    isInvalid: boolean;
    name: string;
    onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onChange: (value: string) => void;
    onFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    selectProps: {};
    spacing: Spacing;
    locale: string;
}, never>> & React.RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "testId" | "icon" | "disabled" | "appearance" | "key" | "defaultValue" | "id" | "placeholder" | "onFocus" | "onBlur" | "onChange" | "selectProps" | "innerProps" | "autoFocus" | "defaultIsOpen" | "hideIcon" | "isDisabled" | "isInvalid" | "name" | "spacing" | "locale" | "isOpen" | "parseInputValue" | "formatDisplayLabel" | "value" | "dateFormat" | "weekStartDay" | "analyticsContext"> & React.RefAttributes<any>>;
export default _default;
