"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));

var _date = require("../styles/date");

/** @jsx jsx */
var Date = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Date(_ref, ref) {
  var day = _ref.children,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isFocused = _ref.isFocused,
      isFocused = _ref$isFocused === void 0 ? false : _ref$isFocused,
      _ref$isToday = _ref.isToday,
      isToday = _ref$isToday === void 0 ? false : _ref$isToday,
      month = _ref.month,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? _noop.default : _ref$onClick,
      _ref$isPreviouslySele = _ref.isPreviouslySelected,
      isPreviouslySelected = _ref$isPreviouslySele === void 0 ? false : _ref$isPreviouslySele,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$isSibling = _ref.isSibling,
      isSibling = _ref$isSibling === void 0 ? false : _ref$isSibling,
      year = _ref.year,
      mode = _ref.mode,
      testId = _ref.testId;
  var dateRef = (0, _react.useRef)({
    day: day,
    month: month,
    year: year,
    isDisabled: isDisabled
  });
  (0, _react.useEffect)(function () {
    dateRef.current = {
      day: day,
      month: month,
      year: year,
      isDisabled: isDisabled
    };
  }, [day, month, year, isDisabled]);
  var handleClick = (0, _react.useCallback)(function () {
    var _dateRef$current = dateRef.current,
        dayValue = _dateRef$current.day,
        monthValue = _dateRef$current.month,
        yearValue = _dateRef$current.year,
        isDisabledValue = _dateRef$current.isDisabled;

    if (!isDisabledValue) {
      onClick({
        day: dayValue,
        month: monthValue,
        year: yearValue
      });
    }
  }, [onClick]);
  var cellControlProps = {
    'data-disabled': isDisabled || undefined,
    'data-focused': isFocused || undefined,
    'data-prev-selected': isPreviouslySelected || undefined,
    'data-selected': isSelected || undefined,
    'data-sibling': isSibling || undefined,
    'data-today': isToday || undefined
  };
  var dateCellStyle = (0, _react.useMemo)(function () {
    return (0, _date.dateCellStyle)(mode);
  }, [mode]);
  return (0, _core.jsx)("button", (0, _extends2.default)({
    css: dateCellStyle,
    "aria-selected": isSelected ? 'true' : 'false',
    tabIndex: isSelected ? 0 : -1,
    role: "gridcell",
    onClick: handleClick,
    ref: ref
  }, cellControlProps, {
    "data-testid": testId && isSelected ? "".concat(testId, "--selected-day") : undefined
  }), day);
}));
Date.displayName = 'Date';
var _default = Date;
exports.default = _default;