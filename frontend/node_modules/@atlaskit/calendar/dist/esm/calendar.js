import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import React, { forwardRef, memo, useMemo } from 'react';
import { jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import noop from '@atlaskit/ds-lib/noop';
import GlobalTheme from '@atlaskit/theme/components';
import HeadingComponent from './internal/components/heading';
import WeekDaysComponent from './internal/components/week-days';
import WeekHeaderComponent from './internal/components/week-header';
import { blankStringArray } from './internal/constants';
import useCalendarRef from './internal/hooks/use-calendar-ref';
import useControlledDateState from './internal/hooks/use-controlled-date-state';
import useFocusing from './internal/hooks/use-focusing';
import useGetWeeks from './internal/hooks/use-get-weeks';
import useHandleDateChange from './internal/hooks/use-handle-date-change';
import useHandleDateSelect from './internal/hooks/use-handle-date-select';
import useLocale from './internal/hooks/use-locale';
import useUniqueId from './internal/hooks/use-unique-id';
import { announcerStyle, wrapperStyle as getWrapperStyle } from './internal/styles/container';
import { gridsContainerStyle } from './internal/styles/grid';
var analyticsAttributes = {
  componentName: 'calendar',
  packageName: "@atlaskit/calendar",
  packageVersion: "11.1.0"
};
var CalendarWithMode = /*#__PURE__*/forwardRef(function Calendar(_ref, ref) {
  var _ref$day = _ref.day,
      day = _ref$day === void 0 ? undefined : _ref$day,
      _ref$defaultDay = _ref.defaultDay,
      defaultDay = _ref$defaultDay === void 0 ? 0 : _ref$defaultDay,
      _ref$defaultDisabled = _ref.defaultDisabled,
      defaultDisabled = _ref$defaultDisabled === void 0 ? blankStringArray : _ref$defaultDisabled,
      _ref$defaultMonth = _ref.defaultMonth,
      defaultMonth = _ref$defaultMonth === void 0 ? 0 : _ref$defaultMonth,
      _ref$defaultPreviousl = _ref.defaultPreviouslySelected,
      defaultPreviouslySelected = _ref$defaultPreviousl === void 0 ? blankStringArray : _ref$defaultPreviousl,
      _ref$defaultSelected = _ref.defaultSelected,
      defaultSelected = _ref$defaultSelected === void 0 ? blankStringArray : _ref$defaultSelected,
      _ref$defaultYear = _ref.defaultYear,
      defaultYear = _ref$defaultYear === void 0 ? 0 : _ref$defaultYear,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? undefined : _ref$disabled,
      _ref$month = _ref.month,
      month = _ref$month === void 0 ? undefined : _ref$month,
      _ref$onBlur = _ref.onBlur,
      onBlur = _ref$onBlur === void 0 ? noop : _ref$onBlur,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onFocus = _ref.onFocus,
      onFocus = _ref$onFocus === void 0 ? noop : _ref$onFocus,
      _ref$onSelect = _ref.onSelect,
      onSelect = _ref$onSelect === void 0 ? noop : _ref$onSelect,
      _ref$previouslySelect = _ref.previouslySelected,
      previouslySelected = _ref$previouslySelect === void 0 ? undefined : _ref$previouslySelect,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? undefined : _ref$selected,
      _ref$today = _ref.today,
      today = _ref$today === void 0 ? undefined : _ref$today,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,
      _ref$year = _ref.year,
      year = _ref$year === void 0 ? undefined : _ref$year,
      analyticsContext = _ref.analyticsContext,
      _ref$weekStartDay = _ref.weekStartDay,
      weekStartDay = _ref$weekStartDay === void 0 ? 0 : _ref$weekStartDay,
      testId = _ref.testId,
      calendarRef = _ref.calendarRef,
      mode = _ref.mode,
      className = _ref.className,
      style = _ref.style;

  var _useControlledDateSta = useControlledDateState({
    day: day,
    defaultDay: defaultDay,
    month: month,
    defaultMonth: defaultMonth,
    year: year,
    defaultYear: defaultYear,
    today: today,
    disabled: disabled,
    defaultDisabled: defaultDisabled,
    selected: selected,
    defaultSelected: defaultSelected,
    previouslySelected: previouslySelected,
    defaultPreviouslySelected: defaultPreviouslySelected
  }),
      _useControlledDateSta2 = _slicedToArray(_useControlledDateSta.day, 2),
      dayValue = _useControlledDateSta2[0],
      setDayValue = _useControlledDateSta2[1],
      _useControlledDateSta3 = _slicedToArray(_useControlledDateSta.month, 2),
      monthValue = _useControlledDateSta3[0],
      setMonthValue = _useControlledDateSta3[1],
      _useControlledDateSta4 = _slicedToArray(_useControlledDateSta.year, 2),
      yearValue = _useControlledDateSta4[0],
      setYearValue = _useControlledDateSta4[1],
      _useControlledDateSta5 = _slicedToArray(_useControlledDateSta.today, 1),
      todayValue = _useControlledDateSta5[0],
      _useControlledDateSta6 = _slicedToArray(_useControlledDateSta.disabled, 1),
      disabledValue = _useControlledDateSta6[0],
      _useControlledDateSta7 = _slicedToArray(_useControlledDateSta.selected, 2),
      selectedValue = _useControlledDateSta7[0],
      setSelectedValue = _useControlledDateSta7[1],
      _useControlledDateSta8 = _slicedToArray(_useControlledDateSta.previous, 2),
      previouslySelectedValue = _useControlledDateSta8[0],
      setPreviouslySelectedValue = _useControlledDateSta8[1];

  var onChangeWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext
  }, analyticsAttributes));

  var _useHandleDateChange = useHandleDateChange({
    day: [dayValue, setDayValue],
    month: [monthValue, setMonthValue],
    year: [yearValue, setYearValue],
    onChange: onChangeWithAnalytics
  }),
      navigate = _useHandleDateChange.navigate,
      handleClickNext = _useHandleDateChange.handleClickNext,
      handleClickPrev = _useHandleDateChange.handleClickPrev;

  var onSelectWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onSelect,
    action: 'selected',
    analyticsData: analyticsContext
  }, analyticsAttributes));

  var _useHandleDateSelect = useHandleDateSelect({
    day: [dayValue, setDayValue],
    month: [monthValue, setMonthValue],
    year: [yearValue, setYearValue],
    selected: [selectedValue, setSelectedValue],
    previous: [, setPreviouslySelectedValue],
    onSelect: onSelectWithAnalytics,
    navigate: navigate
  }),
      handleClickDay = _useHandleDateSelect.handleClickDay,
      handleContainerKeyDown = _useHandleDateSelect.handleContainerKeyDown;

  var _useFocusing = useFocusing({
    onFocus: onFocus,
    onBlur: onBlur
  }),
      handleContainerBlur = _useFocusing.handleContainerBlur,
      handleContainerFocus = _useFocusing.handleContainerFocus;

  useCalendarRef(calendarRef, {
    navigate: navigate
  });
  var weeks = useGetWeeks({
    day: dayValue,
    month: monthValue,
    year: yearValue,
    today: todayValue,
    disabled: disabledValue,
    selected: selectedValue,
    previouslySelected: previouslySelectedValue,
    weekStartDay: weekStartDay
  });
  var announceId = useUniqueId('announce');
  var announcerDate = useMemo(function () {
    return new Date(yearValue, monthValue - 1, dayValue).toString();
  }, [dayValue, monthValue, yearValue]);

  var _useLocale = useLocale({
    locale: locale,
    weekStartDay: weekStartDay
  }),
      monthsLong = _useLocale.monthsLong,
      daysShort = _useLocale.daysShort;

  var wrapperStyle = useMemo(function () {
    return getWrapperStyle(mode);
  }, [mode]);
  return jsx("div", {
    className: className,
    style: style,
    onBlur: handleContainerBlur,
    onFocus: handleContainerFocus,
    onKeyDown: handleContainerKeyDown,
    role: "presentation",
    "data-testid": testId && "".concat(testId, "--container"),
    ref: ref
  }, jsx("div", {
    css: announcerStyle,
    id: announceId,
    "aria-live": "assertive",
    "aria-relevant": "text"
  }, announcerDate), jsx("div", {
    css: wrapperStyle,
    "aria-describedby": announceId,
    "aria-label": "calendar",
    role: "grid",
    tabIndex: 0
  }, jsx(HeadingComponent // The month number needs to be translated to index in the month
  // name array e.g. 1 (January) -> 0
  , {
    monthLongTitle: monthsLong[monthValue - 1],
    year: yearValue,
    handleClickNext: handleClickNext,
    handleClickPrev: handleClickPrev,
    mode: mode,
    testId: testId
  }), jsx("div", {
    css: gridsContainerStyle,
    role: "presentation"
  }, jsx(WeekHeaderComponent, {
    daysShort: daysShort,
    mode: mode
  }), jsx(WeekDaysComponent, {
    weeks: weeks,
    handleClickDay: handleClickDay,
    mode: mode,
    testId: testId
  }))));
});
var Calendar = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Calendar(props, ref) {
  return jsx(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return jsx(CalendarWithMode, _extends({}, props, {
      mode: mode,
      ref: ref
    }));
  });
}));
Calendar.displayName = 'Calendar';
export default Calendar;