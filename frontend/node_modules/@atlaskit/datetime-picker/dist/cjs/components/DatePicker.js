"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DatePickerWithoutAnalytics = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _dateFns = require("date-fns");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _calendar = _interopRequireDefault(require("@atlaskit/calendar"));

var _calendar2 = _interopRequireDefault(require("@atlaskit/icon/glyph/calendar"));

var _locale = require("@atlaskit/locale");

var _select = _interopRequireWildcard(require("@atlaskit/select"));

var _colors = require("@atlaskit/theme/colors");

var _constants = require("@atlaskit/theme/constants");

var _elevation = require("@atlaskit/theme/elevation");

var _internal = require("../internal");

var _FixedLayer = _interopRequireDefault(require("../internal/FixedLayer"));

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var packageName = "@atlaskit/datetime-picker";
var packageVersion = "10.2.1";
/* eslint-disable react/no-unused-prop-types */

function getDateObj(date) {
  return {
    day: date.getDate(),
    month: date.getMonth() + 1,
    year: date.getFullYear()
  };
}

function getValidDate(iso) {
  var date = (0, _dateFns.parse)(iso);
  return (0, _dateFns.isValid)(date) ? getDateObj(date) : {};
}

var StyledMenu = _styled.default.div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n  background-color: ", ";\n  border-radius: ", "px;\n  z-index: ", ";\n  ", ";\n"])), _colors.N20, (0, _constants.borderRadius)(), _constants.layers.dialog, (0, _elevation.e200)());

var Menu = function Menu(_ref) {
  var selectProps = _ref.selectProps,
      innerProps = _ref.innerProps;
  return /*#__PURE__*/_react.default.createElement(_FixedLayer.default, {
    inputValue: selectProps.inputValue,
    containerRef: selectProps.calendarContainerRef,
    content: /*#__PURE__*/_react.default.createElement(StyledMenu, innerProps, /*#__PURE__*/_react.default.createElement(_calendar.default, (0, _extends2.default)({}, getValidDate(selectProps.calendarValue), getValidDate(selectProps.calendarView), {
      disabled: selectProps.calendarDisabled,
      onChange: selectProps.onCalendarChange,
      onSelect: selectProps.onCalendarSelect,
      calendarRef: selectProps.calendarRef,
      selected: [selectProps.calendarValue],
      locale: selectProps.calendarLocale,
      testId: selectProps.testId && "".concat(selectProps.testId, "--calendar"),
      weekStartDay: selectProps.calendarWeekStartDay
    }))),
    testId: selectProps.testId
  });
};

var datePickerDefaultProps = {
  appearance: 'default',
  autoFocus: false,
  defaultIsOpen: false,
  defaultValue: '',
  disabled: [],
  hideIcon: false,
  icon: _calendar2.default,
  id: '',
  innerProps: {},
  isDisabled: false,
  isInvalid: false,
  name: '',
  onBlur: function onBlur(event) {},
  onChange: function onChange(value) {},
  onFocus: function onFocus(event) {},
  selectProps: {},
  spacing: 'default',
  locale: 'en-US' // Not including a default prop for value as it will
  // Make the component a controlled component

};

var DatePicker = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(DatePicker, _React$Component);

  var _super = _createSuper(DatePicker);

  function DatePicker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DatePicker);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "calendarRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "containerRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSafeState", function () {
      return _objectSpread(_objectSpread(_objectSpread({}, _this.state), (0, _pick.default)(_this.props, ['value', 'isOpen'])), (0, _pick.default)(_this.props.selectProps, ['inputValue']));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isDateDisabled", function (date) {
      return _this.props.disabled.indexOf(date) > -1;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCalendarChange", function (_ref2) {
      var iso = _ref2.iso;

      var _iso$split = iso.split('-'),
          _iso$split2 = (0, _slicedToArray2.default)(_iso$split, 3),
          year = _iso$split2[0],
          month = _iso$split2[1],
          date = _iso$split2[2];

      var newIso = iso;
      var parsedDate = parseInt(date, 10);
      var parsedMonth = parseInt(month, 10);
      var parsedYear = parseInt(year, 10);
      var lastDayInMonth = (0, _dateFns.lastDayOfMonth)(new Date(parsedYear, parsedMonth - 1)).getDate();

      if (lastDayInMonth < parsedDate) {
        newIso = "".concat(year, "-").concat((0, _internal.padToTwo)(parsedMonth), "-").concat((0, _internal.padToTwo)(lastDayInMonth));
      } else {
        newIso = "".concat(year, "-").concat((0, _internal.padToTwo)(parsedMonth), "-").concat((0, _internal.padToTwo)(parsedDate));
      }

      _this.setState({
        view: newIso
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCalendarSelect", function (_ref3) {
      var iso = _ref3.iso;

      _this.setState({
        inputValue: '',
        isOpen: false,
        selectedValue: iso,
        view: iso,
        value: iso
      });

      _this.props.onChange(iso);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onInputClick", function () {
      if (!_this.getSafeState().isOpen) {
        _this.setState({
          isOpen: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectBlur", function (event) {
      if (_this.getSafeState().clearingFromIcon) {
        // Don't close menu if blurring after the user has clicked clear
        _this.setState({
          clearingFromIcon: false
        });
      } else {
        _this.setState({
          isOpen: false
        });
      }

      _this.props.onBlur(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectFocus", function (event) {
      var _this$getSafeState = _this.getSafeState(),
          clearingFromIcon = _this$getSafeState.clearingFromIcon,
          value = _this$getSafeState.value;

      if (clearingFromIcon) {
        // Don't open menu if focussing after the user has clicked clear
        _this.setState({
          clearingFromIcon: false
        });
      } else {
        _this.setState({
          isOpen: true,
          view: value
        });
      }

      _this.props.onFocus(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectInput", function (event) {
      var value = event.target.value;

      if (value) {
        var parsed = _this.parseDate(value); // Only try to set the date if we have month & day


        if (parsed && (0, _dateFns.isValid)(parsed)) {
          // We format the parsed date to YYYY-MM-DD here because
          // this is the format expected by the @atlaskit/calendar component
          _this.setState({
            view: (0, _dateFns.format)(parsed, 'YYYY-MM-DD')
          });
        }
      }

      _this.setState({
        isOpen: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectKeyDown", function (event) {
      var _this$getSafeState2 = _this.getSafeState(),
          view = _this$getSafeState2.view,
          selectedValue = _this$getSafeState2.selectedValue;

      var keyPressed = event.key.toLowerCase();

      switch (keyPressed) {
        case 'arrowup':
        case 'arrowdown':
          if (_this.calendarRef) {
            event.preventDefault();
            var key = keyPressed === 'arrowup' ? 'up' : 'down';

            _this.calendarRef.navigate(key);
          }

          _this.setState({
            isOpen: true
          });

          break;

        case 'arrowleft':
        case 'arrowright':
          if (_this.calendarRef) {
            event.preventDefault();

            var _key = keyPressed === 'arrowleft' ? 'left' : 'right';

            _this.calendarRef.navigate(_key);
          }

          break;

        case 'escape':
        case 'tab':
          _this.setState({
            isOpen: false
          });

          break;

        case 'backspace':
        case 'delete':
          if (selectedValue && event.target instanceof HTMLInputElement && event.target.value.length < 1) {
            // If being cleared from keyboard, don't change behaviour
            _this.setState({
              clearingFromIcon: false
            });
          }

          break;

        case 'enter':
          if (!_this.isDateDisabled(view)) {
            _this.setState({
              inputValue: '',
              isOpen: false,
              selectedValue: view,
              value: view,
              view: view
            });

            _this.props.onChange(view);
          }

          break;

        default:
          break;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClear", function () {
      var changedState = {
        selectedValue: '',
        value: '',
        view: _this.props.defaultValue || (0, _dateFns.format)(new Date(), 'YYYY-MM-DD')
      };

      if (!_this.props.hideIcon) {
        changedState = _objectSpread(_objectSpread({}, changedState), {}, {
          clearingFromIcon: true
        });
      }

      _this.setState(changedState);

      _this.props.onChange('');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectChange", function (value, action) {
      // Used for native clear event in React Select
      // Triggered when clicking ClearIndicator or backspace with no value
      if (action.action === 'clear') {
        _this.onClear();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refCalendar", function (ref) {
      _this.calendarRef = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputChange", function (inputValue, actionMeta) {
      var onInputChange = _this.props.selectProps.onInputChange;

      if (onInputChange) {
        onInputChange(inputValue, actionMeta);
      }

      _this.setState({
        inputValue: inputValue
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getContainerRef", function (ref) {
      var oldRef = _this.containerRef;
      _this.containerRef = ref; // Cause a re-render if we're getting the container ref for the first time
      // as the layered menu requires it for dimension calculation

      if (oldRef == null && ref != null) {
        _this.forceUpdate();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSubtleControlStyles", function (isOpen) {
      return {
        border: "2px solid ".concat(isOpen ? _colors.B100 : "transparent"),
        backgroundColor: 'transparent',
        padding: '1px'
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "parseDate", function (date) {
      var _this$props = _this.props,
          parseInputValue = _this$props.parseInputValue,
          dateFormat = _this$props.dateFormat;

      if (parseInputValue) {
        return parseInputValue(date, dateFormat || _internal.defaultDateFormat);
      }

      var _this$getSafeState3 = _this.getSafeState(),
          l10n = _this$getSafeState3.l10n;

      return l10n.parseDate(date);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "formatDate", function (value) {
      var _this$props2 = _this.props,
          formatDisplayLabel = _this$props2.formatDisplayLabel,
          dateFormat = _this$props2.dateFormat;

      var _this$getSafeState4 = _this.getSafeState(),
          l10n = _this$getSafeState4.l10n;

      if (formatDisplayLabel) {
        return formatDisplayLabel(value, dateFormat || _internal.defaultDateFormat);
      }

      var date = (0, _dateFns.parse)(value);

      if (dateFormat) {
        return (0, _dateFns.format)(date, dateFormat);
      }

      return l10n.formatDate(date);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPlaceholder", function () {
      var placeholder = _this.props.placeholder;

      if (placeholder) {
        return placeholder;
      }

      var _this$getSafeState5 = _this.getSafeState(),
          l10n = _this$getSafeState5.l10n;

      return l10n.formatDate(_internal.placeholderDatetime);
    });

    var _getDateObj = getDateObj(new Date()),
        day = _getDateObj.day,
        _month = _getDateObj.month,
        _year = _getDateObj.year;

    _this.state = {
      isOpen: _this.props.defaultIsOpen,
      clearingFromIcon: false,
      inputValue: _this.props.selectProps.inputValue,
      selectedValue: _this.props.value || _this.props.defaultValue,
      value: _this.props.defaultValue,
      view: _this.props.value || _this.props.defaultValue || "".concat(_year, "-").concat((0, _internal.padToTwo)(_month), "-").concat((0, _internal.padToTwo)(day)),
      l10n: (0, _locale.createLocalizationProvider)(_this.props.locale)
    };
    return _this;
  }

  (0, _createClass2.default)(DatePicker, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.locale !== nextProps.locale) {
        this.setState({
          l10n: (0, _locale.createLocalizationProvider)(nextProps.locale)
        });
      }
    } // All state needs to be accessed via this function so that the state is mapped from props
    // correctly to allow controlled/uncontrolled usage.

  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          appearance = _this$props3.appearance,
          autoFocus = _this$props3.autoFocus,
          disabled = _this$props3.disabled,
          hideIcon = _this$props3.hideIcon,
          icon = _this$props3.icon,
          id = _this$props3.id,
          innerProps = _this$props3.innerProps,
          isDisabled = _this$props3.isDisabled,
          isInvalid = _this$props3.isInvalid,
          name = _this$props3.name,
          selectProps = _this$props3.selectProps,
          spacing = _this$props3.spacing,
          locale = _this$props3.locale,
          testId = _this$props3.testId,
          weekStartDay = _this$props3.weekStartDay;
      var BORDER_WIDTH = 2;
      var ICON_PADDING = 2;

      var _this$getSafeState6 = this.getSafeState(),
          value = _this$getSafeState6.value,
          view = _this$getSafeState6.view,
          isOpen = _this$getSafeState6.isOpen,
          inputValue = _this$getSafeState6.inputValue;

      var menuIsOpen = isOpen && !isDisabled;
      var showClearIndicator = Boolean((value || inputValue) && !hideIcon);
      var dropDownIcon = appearance === 'subtle' || hideIcon || showClearIndicator ? null : icon;
      var selectComponents = {
        DropdownIndicator: dropDownIcon,
        Menu: Menu
      };

      if (!showClearIndicator) {
        selectComponents.ClearIndicator = _internal.EmptyClearIndicator;
      }

      var _selectProps$styles = selectProps.styles,
          selectStyles = _selectProps$styles === void 0 ? {} : _selectProps$styles;
      var controlStyles = appearance === 'subtle' ? this.getSubtleControlStyles(isOpen) : {};
      var disabledStyle = isDisabled ? {
        pointerEvents: 'none'
      } : {};
      var calendarProps = {
        calendarContainerRef: this.containerRef,
        calendarRef: this.refCalendar,
        calendarDisabled: disabled,
        calendarValue: value && (0, _dateFns.format)((0, _dateFns.parse)(value), 'YYYY-MM-DD'),
        calendarView: view,
        onCalendarChange: this.onCalendarChange,
        onCalendarSelect: this.onCalendarSelect,
        calendarLocale: locale,
        calendarWeekStartDay: weekStartDay
      };
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, innerProps, {
        role: "presentation",
        onClick: this.onInputClick,
        onInput: this.onSelectInput,
        onKeyDown: this.onSelectKeyDown,
        ref: this.getContainerRef,
        "data-testid": testId && "".concat(testId, "--container")
      }), /*#__PURE__*/_react.default.createElement("input", {
        name: name,
        type: "hidden",
        value: value,
        "data-testid": testId && "".concat(testId, "--input")
      }), /*#__PURE__*/_react.default.createElement(_select.default, (0, _extends2.default)({
        enableAnimation: false,
        menuIsOpen: menuIsOpen,
        closeMenuOnSelect: true,
        autoFocus: autoFocus,
        instanceId: id,
        isDisabled: isDisabled,
        onBlur: this.onSelectBlur,
        onFocus: this.onSelectFocus,
        inputValue: inputValue,
        onInputChange: this.handleInputChange,
        components: selectComponents,
        onChange: this.onSelectChange,
        styles: (0, _select.mergeStyles)(selectStyles, {
          control: function control(base) {
            return _objectSpread(_objectSpread(_objectSpread({}, base), controlStyles), disabledStyle);
          },
          indicatorsContainer: function indicatorsContainer(base) {
            return _objectSpread(_objectSpread({}, base), {}, {
              paddingLeft: ICON_PADDING,
              paddingRight: (0, _constants.gridSize)() - BORDER_WIDTH
            });
          }
        }),
        placeholder: this.getPlaceholder(),
        value: value && {
          label: this.formatDate(value),
          value: value
        }
      }, selectProps, calendarProps, {
        isClearable: true,
        spacing: spacing,
        validationState: isInvalid ? 'error' : 'default',
        testId: testId
      })));
    }
  }]);
  return DatePicker;
}(_react.default.Component);

exports.DatePickerWithoutAnalytics = DatePicker;
(0, _defineProperty2.default)(DatePicker, "defaultProps", datePickerDefaultProps);

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'datePicker',
  packageName: packageName,
  packageVersion: packageVersion
})((0, _analyticsNext.withAnalyticsEvents)({
  onChange: (0, _analyticsNext.createAndFireEvent)('atlaskit')({
    action: 'selectedDate',
    actionSubject: 'datePicker',
    attributes: {
      componentName: 'datePicker',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(DatePicker));

exports.default = _default;